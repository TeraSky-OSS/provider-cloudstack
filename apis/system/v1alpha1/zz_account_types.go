// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountInitParameters struct {

	// The account name. If not specified, the username will be used as the account name.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// The account type. Possible values are 0 for regular user, 1 for admin, and 2 for domain admin.
	AccountType *float64 `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// The email address of the account owner.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// The first name of the account owner.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The last name of the account owner.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// The password for the account.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the role associated with the account.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The username of the account.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AccountObservation struct {

	// The account name. If not specified, the username will be used as the account name.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// The account type. Possible values are 0 for regular user, 1 for admin, and 2 for domain admin.
	AccountType *float64 `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// The email address of the account owner.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// The first name of the account owner.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The ID of the account.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The last name of the account owner.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// The password for the account.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the role associated with the account.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The username of the account.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AccountParameters struct {

	// The account name. If not specified, the username will be used as the account name.
	// +kubebuilder:validation:Optional
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// The account type. Possible values are 0 for regular user, 1 for admin, and 2 for domain admin.
	// +kubebuilder:validation:Optional
	AccountType *float64 `json:"accountType,omitempty" tf:"account_type,omitempty"`

	// The email address of the account owner.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// The first name of the account owner.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The last name of the account owner.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// The password for the account.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The ID of the role associated with the account.
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The username of the account.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// AccountSpec defines the desired state of Account
type AccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountInitParameters `json:"initProvider,omitempty"`
}

// AccountStatus defines the observed state of Account.
type AccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Account is the Schema for the Accounts API. Creates a Account
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Account struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountType) || (has(self.initProvider) && has(self.initProvider.accountType))",message="spec.forProvider.accountType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firstName) || (has(self.initProvider) && has(self.initProvider.firstName))",message="spec.forProvider.firstName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lastName) || (has(self.initProvider) && has(self.initProvider.lastName))",message="spec.forProvider.lastName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.password) || (has(self.initProvider) && has(self.initProvider.password))",message="spec.forProvider.password is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   AccountSpec   `json:"spec"`
	Status AccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountList contains a list of Accounts
type AccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Account `json:"items"`
}

// Repository type metadata.
var (
	Account_Kind             = "Account"
	Account_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Account_Kind}.String()
	Account_KindAPIVersion   = Account_Kind + "." + CRDGroupVersion.String()
	Account_GroupVersionKind = CRDGroupVersion.WithKind(Account_Kind)
)

func init() {
	SchemeBuilder.Register(&Account{}, &AccountList{})
}
