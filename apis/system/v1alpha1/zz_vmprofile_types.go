// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VMProfileInitParameters struct {

	// A time interval to wait for graceful
	// shutdown of instances.
	DestroyVMGracePeriod *string `json:"destroyVmGracePeriod,omitempty" tf:"destroy_vm_grace_period,omitempty"`

	// A mapping of metadata key/values to assign to the
	// resource.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A mapping of additional params used when
	// creating new instances.
	// +mapType=granular
	OtherDeployParams map[string]*string `json:"otherDeployParams,omitempty" tf:"other_deploy_params,omitempty"`

	// The name or ID of the service offering used
	// for instances. Changing this forces a new resource to be created.
	ServiceOffering *string `json:"serviceOffering,omitempty" tf:"service_offering,omitempty"`

	// The name or ID of the template used for instances.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// The name or ID of the zone where instances will be
	// created. Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type VMProfileObservation struct {

	// A time interval to wait for graceful
	// shutdown of instances.
	DestroyVMGracePeriod *string `json:"destroyVmGracePeriod,omitempty" tf:"destroy_vm_grace_period,omitempty"`

	// The autoscale VM profile ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A mapping of metadata key/values to assign to the
	// resource.
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A mapping of additional params used when
	// creating new instances.
	// +mapType=granular
	OtherDeployParams map[string]*string `json:"otherDeployParams,omitempty" tf:"other_deploy_params,omitempty"`

	// The name or ID of the service offering used
	// for instances. Changing this forces a new resource to be created.
	ServiceOffering *string `json:"serviceOffering,omitempty" tf:"service_offering,omitempty"`

	// The name or ID of the template used for instances.
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// The name or ID of the zone where instances will be
	// created. Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type VMProfileParameters struct {

	// A time interval to wait for graceful
	// shutdown of instances.
	// +kubebuilder:validation:Optional
	DestroyVMGracePeriod *string `json:"destroyVmGracePeriod,omitempty" tf:"destroy_vm_grace_period,omitempty"`

	// A mapping of metadata key/values to assign to the
	// resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A mapping of additional params used when
	// creating new instances.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	OtherDeployParams map[string]*string `json:"otherDeployParams,omitempty" tf:"other_deploy_params,omitempty"`

	// The name or ID of the service offering used
	// for instances. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ServiceOffering *string `json:"serviceOffering,omitempty" tf:"service_offering,omitempty"`

	// The name or ID of the template used for instances.
	// +kubebuilder:validation:Optional
	Template *string `json:"template,omitempty" tf:"template,omitempty"`

	// The name or ID of the zone where instances will be
	// created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// VMProfileSpec defines the desired state of VMProfile
type VMProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VMProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VMProfileInitParameters `json:"initProvider,omitempty"`
}

// VMProfileStatus defines the observed state of VMProfile.
type VMProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VMProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VMProfile is the Schema for the VMProfiles API. Creates an autoscale VM profile.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type VMProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceOffering) || (has(self.initProvider) && has(self.initProvider.serviceOffering))",message="spec.forProvider.serviceOffering is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.template) || (has(self.initProvider) && has(self.initProvider.template))",message="spec.forProvider.template is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   VMProfileSpec   `json:"spec"`
	Status VMProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VMProfileList contains a list of VMProfiles
type VMProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VMProfile `json:"items"`
}

// Repository type metadata.
var (
	VMProfile_Kind             = "VMProfile"
	VMProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VMProfile_Kind}.String()
	VMProfile_KindAPIVersion   = VMProfile_Kind + "." + CRDGroupVersion.String()
	VMProfile_GroupVersionKind = CRDGroupVersion.WithKind(VMProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&VMProfile{}, &VMProfileList{})
}
