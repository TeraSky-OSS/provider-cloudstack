// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplateInitParameters struct {

	// The display name of the template.
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The format of the template. Valid values are QCOW2,
	// RAW, and VHD.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The target hypervisor for the template. Changing
	// this forces a new resource to be created.
	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// Set to indicate if the template contains
	// tools to support dynamic scaling of VM cpu/memory (defaults false)
	IsDynamicallyScalable *bool `json:"isDynamicallyScalable,omitempty" tf:"is_dynamically_scalable,omitempty"`

	// Set to indicate if the template is extractable
	// (defaults false)
	IsExtractable *bool `json:"isExtractable,omitempty" tf:"is_extractable,omitempty"`

	// Set to indicate if the template is featured
	// (defaults false)
	IsFeatured *bool `json:"isFeatured,omitempty" tf:"is_featured,omitempty"`

	// Set to indicate if the template is available for
	// all accounts (defaults true)
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// The maximum time in seconds to wait until the
	// template is ready for use (defaults 300 seconds)
	IsReadyTimeout *float64 `json:"isReadyTimeout,omitempty" tf:"is_ready_timeout,omitempty"`

	// The name of the template.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The OS Type that best represents the OS of this
	// template.
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// Set to indicate if the template should be
	// password enabled (defaults false)
	PasswordEnabled *bool `json:"passwordEnabled,omitempty" tf:"password_enabled,omitempty"`

	// The name or ID of the project to create this template for.
	// Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The URL of where the template is hosted. Changing this
	// forces a new resource to be created.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name or ID of the zone where this template will be created.
	// Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type TemplateObservation struct {

	// The display name of the template.
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The format of the template. Valid values are QCOW2,
	// RAW, and VHD.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The target hypervisor for the template. Changing
	// this forces a new resource to be created.
	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// The template ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Set to indicate if the template contains
	// tools to support dynamic scaling of VM cpu/memory (defaults false)
	IsDynamicallyScalable *bool `json:"isDynamicallyScalable,omitempty" tf:"is_dynamically_scalable,omitempty"`

	// Set to indicate if the template is extractable
	// (defaults false)
	IsExtractable *bool `json:"isExtractable,omitempty" tf:"is_extractable,omitempty"`

	// Set to indicate if the template is featured
	// (defaults false)
	IsFeatured *bool `json:"isFeatured,omitempty" tf:"is_featured,omitempty"`

	// Set to indicate if the template is available for
	// all accounts (defaults true)
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Set to "true" once the template is ready for use.
	IsReady *bool `json:"isReady,omitempty" tf:"is_ready,omitempty"`

	// The maximum time in seconds to wait until the
	// template is ready for use (defaults 300 seconds)
	IsReadyTimeout *float64 `json:"isReadyTimeout,omitempty" tf:"is_ready_timeout,omitempty"`

	// The name of the template.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The OS Type that best represents the OS of this
	// template.
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// Set to indicate if the template should be
	// password enabled (defaults false)
	PasswordEnabled *bool `json:"passwordEnabled,omitempty" tf:"password_enabled,omitempty"`

	// The name or ID of the project to create this template for.
	// Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The URL of where the template is hosted. Changing this
	// forces a new resource to be created.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name or ID of the zone where this template will be created.
	// Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type TemplateParameters struct {

	// The display name of the template.
	// +kubebuilder:validation:Optional
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The format of the template. Valid values are QCOW2,
	// RAW, and VHD.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The target hypervisor for the template. Changing
	// this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Hypervisor *string `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// Set to indicate if the template contains
	// tools to support dynamic scaling of VM cpu/memory (defaults false)
	// +kubebuilder:validation:Optional
	IsDynamicallyScalable *bool `json:"isDynamicallyScalable,omitempty" tf:"is_dynamically_scalable,omitempty"`

	// Set to indicate if the template is extractable
	// (defaults false)
	// +kubebuilder:validation:Optional
	IsExtractable *bool `json:"isExtractable,omitempty" tf:"is_extractable,omitempty"`

	// Set to indicate if the template is featured
	// (defaults false)
	// +kubebuilder:validation:Optional
	IsFeatured *bool `json:"isFeatured,omitempty" tf:"is_featured,omitempty"`

	// Set to indicate if the template is available for
	// all accounts (defaults true)
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// The maximum time in seconds to wait until the
	// template is ready for use (defaults 300 seconds)
	// +kubebuilder:validation:Optional
	IsReadyTimeout *float64 `json:"isReadyTimeout,omitempty" tf:"is_ready_timeout,omitempty"`

	// The name of the template.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The OS Type that best represents the OS of this
	// template.
	// +kubebuilder:validation:Optional
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// Set to indicate if the template should be
	// password enabled (defaults false)
	// +kubebuilder:validation:Optional
	PasswordEnabled *bool `json:"passwordEnabled,omitempty" tf:"password_enabled,omitempty"`

	// The name or ID of the project to create this template for.
	// Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The URL of where the template is hosted. Changing this
	// forces a new resource to be created.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// The name or ID of the zone where this template will be created.
	// Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// TemplateSpec defines the desired state of Template
type TemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TemplateInitParameters `json:"initProvider,omitempty"`
}

// TemplateStatus defines the observed state of Template.
type TemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Template is the Schema for the Templates API. Registers an existing template into the CloudStack cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Template struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) && has(self.initProvider.format))",message="spec.forProvider.format is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hypervisor) || (has(self.initProvider) && has(self.initProvider.hypervisor))",message="spec.forProvider.hypervisor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.osType) || (has(self.initProvider) && has(self.initProvider.osType))",message="spec.forProvider.osType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   TemplateSpec   `json:"spec"`
	Status TemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateList contains a list of Templates
type TemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Template `json:"items"`
}

// Repository type metadata.
var (
	Template_Kind             = "Template"
	Template_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Template_Kind}.String()
	Template_KindAPIVersion   = Template_Kind + "." + CRDGroupVersion.String()
	Template_GroupVersionKind = CRDGroupVersion.WithKind(Template_Kind)
)

func init() {
	SchemeBuilder.Register(&Template{}, &TemplateList{})
}
