// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NicInitParameters struct {

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type NicObservation struct {

	// The ID of the NIC.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type NicParameters struct {

	// The IP address to assign to the NIC. Changing this
	// forces a new resource to be created.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The ID of the network to plug the NIC into. Changing
	// this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// The ID of the virtual machine to which to
	// attach the NIC. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// NicSpec defines the desired state of Nic
type NicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NicInitParameters `json:"initProvider,omitempty"`
}

// NicStatus defines the observed state of Nic.
type NicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Nic is the Schema for the Nics API. Creates an additional NIC to add a VM to the specified network.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Nic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkId) || (has(self.initProvider) && has(self.initProvider.networkId))",message="spec.forProvider.networkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachineId) || (has(self.initProvider) && has(self.initProvider.virtualMachineId))",message="spec.forProvider.virtualMachineId is a required parameter"
	Spec   NicSpec   `json:"spec"`
	Status NicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NicList contains a list of Nics
type NicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Nic `json:"items"`
}

// Repository type metadata.
var (
	Nic_Kind             = "Nic"
	Nic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Nic_Kind}.String()
	Nic_KindAPIVersion   = Nic_Kind + "." + CRDGroupVersion.String()
	Nic_GroupVersionKind = CRDGroupVersion.WithKind(Nic_Kind)
)

func init() {
	SchemeBuilder.Register(&Nic{}, &NicList{})
}
