// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OfferingInitParameters struct {

	// The display text of the network offering.
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The type of IP address allocation for the network offering. Possible values are "Shared" or "Isolated".
	GuestIPType *string `json:"guestIpType,omitempty" tf:"guest_ip_type,omitempty"`

	// The name of the network offering.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of traffic for the network offering. Possible values are "Guest" or "Management".
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`
}

type OfferingObservation struct {

	// The display text of the network offering.
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The type of IP address allocation for the network offering. Possible values are "Shared" or "Isolated".
	GuestIPType *string `json:"guestIpType,omitempty" tf:"guest_ip_type,omitempty"`

	// The ID of the network offering.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the network offering.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of traffic for the network offering. Possible values are "Guest" or "Management".
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`
}

type OfferingParameters struct {

	// The display text of the network offering.
	// +kubebuilder:validation:Optional
	DisplayText *string `json:"displayText,omitempty" tf:"display_text,omitempty"`

	// The type of IP address allocation for the network offering. Possible values are "Shared" or "Isolated".
	// +kubebuilder:validation:Optional
	GuestIPType *string `json:"guestIpType,omitempty" tf:"guest_ip_type,omitempty"`

	// The name of the network offering.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of traffic for the network offering. Possible values are "Guest" or "Management".
	// +kubebuilder:validation:Optional
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`
}

// OfferingSpec defines the desired state of Offering
type OfferingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OfferingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OfferingInitParameters `json:"initProvider,omitempty"`
}

// OfferingStatus defines the observed state of Offering.
type OfferingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OfferingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Offering is the Schema for the Offerings API. Creates a Network Offering
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Offering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayText) || (has(self.initProvider) && has(self.initProvider.displayText))",message="spec.forProvider.displayText is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.guestIpType) || (has(self.initProvider) && has(self.initProvider.guestIpType))",message="spec.forProvider.guestIpType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficType) || (has(self.initProvider) && has(self.initProvider.trafficType))",message="spec.forProvider.trafficType is a required parameter"
	Spec   OfferingSpec   `json:"spec"`
	Status OfferingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OfferingList contains a list of Offerings
type OfferingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Offering `json:"items"`
}

// Repository type metadata.
var (
	Offering_Kind             = "Offering"
	Offering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Offering_Kind}.String()
	Offering_KindAPIVersion   = Offering_Kind + "." + CRDGroupVersion.String()
	Offering_GroupVersionKind = CRDGroupVersion.WithKind(Offering_Kind)
)

func init() {
	SchemeBuilder.Register(&Offering{}, &OfferingList{})
}
