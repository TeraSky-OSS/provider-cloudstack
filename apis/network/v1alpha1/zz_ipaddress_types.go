// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpaddressInitParameters_2 struct {

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type IpaddressObservation_2 struct {

	// The secondary IP address ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type IpaddressParameters_2 struct {

	// The IP address to bind the to NIC. If not supplied
	// an IP address will be selected randomly. Changing this forces a new resource
	// to be	created.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The NIC ID to which you want to attach the secondary IP
	// address. Changing this forces a new resource to be created (defaults to the
	// ID of the primary NIC)
	// +kubebuilder:validation:Optional
	NicID *string `json:"nicId,omitempty" tf:"nic_id,omitempty"`

	// The ID of the virtual machine to which you
	// want to attach the secondary IP address. Changing this forces a new resource
	// to be created.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// IpaddressSpec defines the desired state of Ipaddress
type IpaddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpaddressParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpaddressInitParameters_2 `json:"initProvider,omitempty"`
}

// IpaddressStatus defines the observed state of Ipaddress.
type IpaddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpaddressObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Ipaddress is the Schema for the Ipaddresss API. Assigns a secondary IP to a NIC.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Ipaddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.virtualMachineId) || (has(self.initProvider) && has(self.initProvider.virtualMachineId))",message="spec.forProvider.virtualMachineId is a required parameter"
	Spec   IpaddressSpec   `json:"spec"`
	Status IpaddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpaddressList contains a list of Ipaddresss
type IpaddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ipaddress `json:"items"`
}

// Repository type metadata.
var (
	Ipaddress_Kind             = "Ipaddress"
	Ipaddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ipaddress_Kind}.String()
	Ipaddress_KindAPIVersion   = Ipaddress_Kind + "." + CRDGroupVersion.String()
	Ipaddress_GroupVersionKind = CRDGroupVersion.WithKind(Ipaddress_Kind)
)

func init() {
	SchemeBuilder.Register(&Ipaddress{}, &IpaddressList{})
}
