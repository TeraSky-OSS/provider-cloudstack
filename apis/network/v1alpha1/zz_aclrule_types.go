// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ACLRuleInitParameters struct {

	// The network ACL ID for which to create the rules.
	// Changing this forces a new resource to be created.
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// USE WITH CAUTION! If enabled all the firewall rules for
	// this network ACL will be managed by this resource. This means it will delete
	// all firewall rules that are not in your config! (defaults false)
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	Rule []ACLRuleRuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ACLRuleObservation struct {

	// The network ACL ID for which to create the rules.
	// Changing this forces a new resource to be created.
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// The ACL ID for which the rules are created.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// USE WITH CAUTION! If enabled all the firewall rules for
	// this network ACL will be managed by this resource. This means it will delete
	// all firewall rules that are not in your config! (defaults false)
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	Rule []ACLRuleRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ACLRuleParameters struct {

	// The network ACL ID for which to create the rules.
	// Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	ACLID *string `json:"aclId,omitempty" tf:"acl_id,omitempty"`

	// USE WITH CAUTION! If enabled all the firewall rules for
	// this network ACL will be managed by this resource. This means it will delete
	// all firewall rules that are not in your config! (defaults false)
	// +kubebuilder:validation:Optional
	Managed *bool `json:"managed,omitempty" tf:"managed,omitempty"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below. If managed = false at least one rule is required!
	// +kubebuilder:validation:Optional
	Rule []ACLRuleRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ACLRuleRuleInitParameters struct {

	// The action for the rule. Valid options are: allow and
	// deny (defaults allow).
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress (defaults ingress).
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`
}

type ACLRuleRuleObservation struct {

	// The action for the rule. Valid options are: allow and
	// deny (defaults allow).
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress (defaults ingress).
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`

	// +mapType=granular
	Uuids map[string]*string `json:"uuids,omitempty" tf:"uuids,omitempty"`
}

type ACLRuleRuleParameters struct {

	// The action for the rule. Valid options are: allow and
	// deny (defaults allow).
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A CIDR list to allow access to the given ports.
	// +kubebuilder:validation:Optional
	// +listType=set
	CidrList []*string `json:"cidrList" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +kubebuilder:validation:Optional
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress (defaults ingress).
	// +kubebuilder:validation:Optional
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`
}

// ACLRuleSpec defines the desired state of ACLRule
type ACLRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ACLRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ACLRuleInitParameters `json:"initProvider,omitempty"`
}

// ACLRuleStatus defines the observed state of ACLRule.
type ACLRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ACLRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ACLRule is the Schema for the ACLRules API. Creates network ACL rules for a given network ACL.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type ACLRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.aclId) || (has(self.initProvider) && has(self.initProvider.aclId))",message="spec.forProvider.aclId is a required parameter"
	Spec   ACLRuleSpec   `json:"spec"`
	Status ACLRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ACLRuleList contains a list of ACLRules
type ACLRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ACLRule `json:"items"`
}

// Repository type metadata.
var (
	ACLRule_Kind             = "ACLRule"
	ACLRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ACLRule_Kind}.String()
	ACLRule_KindAPIVersion   = ACLRule_Kind + "." + CRDGroupVersion.String()
	ACLRule_GroupVersionKind = CRDGroupVersion.WithKind(ACLRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ACLRule{}, &ACLRuleList{})
}
