// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskInitParameters struct {

	// Determines whether or not to attach the disk volume to a
	// virtual machine (defaults false).
	Attach *bool `json:"attach,omitempty" tf:"attach,omitempty"`

	// The device ID to map the disk volume to within the guest OS.
	DeviceID *float64 `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// The name or ID of the disk offering to use for
	// this disk volume.
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// The name of the disk volume. Changing this forces a new
	// resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Determines whether or not to detach the disk volume
	// from the virtual machine on disk offering or size change.
	ReattachOnChange *bool `json:"reattachOnChange,omitempty" tf:"reattach_on_change,omitempty"`

	// Verifies if the disk volume is allowed to shrink when
	// resizing (defaults false).
	ShrinkOk *bool `json:"shrinkOk,omitempty" tf:"shrink_ok,omitempty"`

	// The size of the disk volume in gigabytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual machine to which you want
	// to attach the disk volume.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// The name or ID of the zone where this disk volume will be available.
	// Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type DiskObservation struct {

	// Determines whether or not to attach the disk volume to a
	// virtual machine (defaults false).
	Attach *bool `json:"attach,omitempty" tf:"attach,omitempty"`

	// The device ID to map the disk volume to within the guest OS.
	DeviceID *float64 `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// The name or ID of the disk offering to use for
	// this disk volume.
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// The ID of the disk volume.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the disk volume. Changing this forces a new
	// resource to be created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Determines whether or not to detach the disk volume
	// from the virtual machine on disk offering or size change.
	ReattachOnChange *bool `json:"reattachOnChange,omitempty" tf:"reattach_on_change,omitempty"`

	// Verifies if the disk volume is allowed to shrink when
	// resizing (defaults false).
	ShrinkOk *bool `json:"shrinkOk,omitempty" tf:"shrink_ok,omitempty"`

	// The size of the disk volume in gigabytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual machine to which you want
	// to attach the disk volume.
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// The name or ID of the zone where this disk volume will be available.
	// Changing this forces a new resource to be created.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type DiskParameters struct {

	// Determines whether or not to attach the disk volume to a
	// virtual machine (defaults false).
	// +kubebuilder:validation:Optional
	Attach *bool `json:"attach,omitempty" tf:"attach,omitempty"`

	// The device ID to map the disk volume to within the guest OS.
	// +kubebuilder:validation:Optional
	DeviceID *float64 `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// The name or ID of the disk offering to use for
	// this disk volume.
	// +kubebuilder:validation:Optional
	DiskOffering *string `json:"diskOffering,omitempty" tf:"disk_offering,omitempty"`

	// The name of the disk volume. Changing this forces a new
	// resource to be created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The name or ID of the project to deploy this
	// instance to. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Determines whether or not to detach the disk volume
	// from the virtual machine on disk offering or size change.
	// +kubebuilder:validation:Optional
	ReattachOnChange *bool `json:"reattachOnChange,omitempty" tf:"reattach_on_change,omitempty"`

	// Verifies if the disk volume is allowed to shrink when
	// resizing (defaults false).
	// +kubebuilder:validation:Optional
	ShrinkOk *bool `json:"shrinkOk,omitempty" tf:"shrink_ok,omitempty"`

	// The size of the disk volume in gigabytes.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual machine to which you want
	// to attach the disk volume.
	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// The name or ID of the zone where this disk volume will be available.
	// Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// DiskSpec defines the desired state of Disk
type DiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiskInitParameters `json:"initProvider,omitempty"`
}

// DiskStatus defines the observed state of Disk.
type DiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Disk is the Schema for the Disks API. Creates a disk volume from a disk offering. This disk volume will be attached to a virtual machine if the optional parameters are configured.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type Disk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   DiskSpec   `json:"spec"`
	Status DiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskList contains a list of Disks
type DiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Disk `json:"items"`
}

// Repository type metadata.
var (
	Disk_Kind             = "Disk"
	Disk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Disk_Kind}.String()
	Disk_KindAPIVersion   = Disk_Kind + "." + CRDGroupVersion.String()
	Disk_GroupVersionKind = CRDGroupVersion.WithKind(Disk_Kind)
)

func init() {
	SchemeBuilder.Register(&Disk{}, &DiskList{})
}
