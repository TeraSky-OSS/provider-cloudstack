// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupRuleInitParameters struct {

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project in which the security
	// group is created. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below.
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The security group ID for which to create
	// the rules. Changing this forces a new resource to be created.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type GroupRuleObservation struct {

	// The security group ID for which the rules are created.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project in which the security
	// group is created. Changing this forces a new resource to be created.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below.
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// The security group ID for which to create
	// the rules. Changing this forces a new resource to be created.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type GroupRuleParameters struct {

	// Specifies how much rules will be created or deleted
	// concurrently. (defaults 2)
	// +kubebuilder:validation:Optional
	Parallelism *float64 `json:"parallelism,omitempty" tf:"parallelism,omitempty"`

	// The name or ID of the project in which the security
	// group is created. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Can be specified multiple times. Each rule block supports
	// fields documented below.
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The security group ID for which to create
	// the rules. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type RuleInitParameters struct {

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress. (defaults ingress)
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`

	// A list of security groups to apply
	// the rules to.
	// +listType=set
	UserSecurityGroupList []*string `json:"userSecurityGroupList,omitempty" tf:"user_security_group_list,omitempty"`
}

type RuleObservation struct {

	// A CIDR list to allow access to the given ports.
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress. (defaults ingress)
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`

	// A list of security groups to apply
	// the rules to.
	// +listType=set
	UserSecurityGroupList []*string `json:"userSecurityGroupList,omitempty" tf:"user_security_group_list,omitempty"`

	// +mapType=granular
	Uuids map[string]*string `json:"uuids,omitempty" tf:"uuids,omitempty"`
}

type RuleParameters struct {

	// A CIDR list to allow access to the given ports.
	// +kubebuilder:validation:Optional
	// +listType=set
	CidrList []*string `json:"cidrList,omitempty" tf:"cidr_list,omitempty"`

	// The ICMP code to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	// +kubebuilder:validation:Optional
	IcmpCode *float64 `json:"icmpCode,omitempty" tf:"icmp_code,omitempty"`

	// The ICMP type to allow, or -1 to allow any. This
	// can only be specified if the protocol is ICMP. (defaults 0)
	// +kubebuilder:validation:Optional
	IcmpType *float64 `json:"icmpType,omitempty" tf:"icmp_type,omitempty"`

	// List of ports and/or port ranges to allow. This can only
	// be specified if the protocol is TCP, UDP, ALL or a valid protocol number.
	// +kubebuilder:validation:Optional
	// +listType=set
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The name of the protocol to allow. Valid options are:
	// tcp, udp, icmp, all or a valid protocol number.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// The traffic type for the rule. Valid options are:
	// ingress or egress. (defaults ingress)
	// +kubebuilder:validation:Optional
	TrafficType *string `json:"trafficType,omitempty" tf:"traffic_type,omitempty"`

	// A list of security groups to apply
	// the rules to.
	// +kubebuilder:validation:Optional
	// +listType=set
	UserSecurityGroupList []*string `json:"userSecurityGroupList,omitempty" tf:"user_security_group_list,omitempty"`
}

// GroupRuleSpec defines the desired state of GroupRule
type GroupRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupRuleInitParameters `json:"initProvider,omitempty"`
}

// GroupRuleStatus defines the observed state of GroupRule.
type GroupRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupRule is the Schema for the GroupRules API. Authorizes and revokes both ingress and egress rulea for a given security group.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,cloudstack}
type GroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	Spec   GroupRuleSpec   `json:"spec"`
	Status GroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupRuleList contains a list of GroupRules
type GroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupRule `json:"items"`
}

// Repository type metadata.
var (
	GroupRule_Kind             = "GroupRule"
	GroupRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupRule_Kind}.String()
	GroupRule_KindAPIVersion   = GroupRule_Kind + "." + CRDGroupVersion.String()
	GroupRule_GroupVersionKind = CRDGroupVersion.WithKind(GroupRule_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupRule{}, &GroupRuleList{})
}
